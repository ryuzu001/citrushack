#include<vector>#include<iostream>#include <vector>#include                   <string>     //   #include    <iostream>
#include<cassert>#include<cstdio>#include<cstring>                                              int main(int argc, char* argv[]) {string inputName = ""; //input file's name
                       string outputName=""; //output file's name
                        if(argc             >1){        cout<< "Opening file " << argv[1] << "." << endl;                                        ifs.open(argv[1]);                  if(!ifs.is_open()) {cout << "Could not open file " <<         argv[1] << "." << endl;return 1;}                outputName = argv[1];        outputName.replace(outputName.length() - 3, 3, "out", 0, 3);    }                        else                {        cout << "Enter name of file to use for input: ";    cin  >> inputName;                                                cout << endl;                                    cout << "Opening file " << inputName << "." << endl;        ifs.open(inputName.c_str());                                        if(!ifs.is_open()) {cout << "Could not open file " << inputName << "." << endl; return 1;                            }        outputName = inputName;                outputName.replace(outputName.length()          - 3,    3,       "out", 0, 3);    }    ofs.open(outputName.c_str(), fstream::trunc | fstream::out);                        if(!ofs.is_open()) {            cout << "Could not open file "<<outputName<<"."<<endl;return 1; // 1 indicates error
                                        }                                    cout << "Outputting to " << outputName << "." << endl;        int    testCaseNum        = 1;        char                extractN;double c;            while(ifs.good()) { //run through the test cases and print out three trees for each
        OBTree<double> obt;                AVLTree<double> avlt;        //HBTree<double> hbt;
            //HBTree<Comparable> hbt;ifs >> c;
        do  //insert nodes into tree
        {            obt.insert(c);            avlt.insert(c);            // HB_Node<double>* temp = new HB_Node<double>(c, 0, 0, 0, 0, 0);
            // hbt.insert(temp, hbt.getRoot());
        }        while((ifs.peek() != '\n') && (ifs >> c));                cout << "TEST CASE: " << testCaseNum << endl << endl;ofs << "TEST CASE: " << testCaseNum << endl << endl;        prettyprint(obt.getRoot(), " ", " <");          //print the OBTree
                                        cout << endl;        ofs << endl;                            prettyprint(avlt.getRoot(), " ", " <");     //print the AVLTree
        cout << endl;        ofs << endl;        // prettyprint(hbt.getRoot(), " ", " <");  //print the HBTree
        // cout << endl;
                        // ofs << endl;
        ++testCaseNum;  //increment test case number
    }